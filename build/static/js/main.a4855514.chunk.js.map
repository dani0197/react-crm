{"version":3,"sources":["components/clients/Client-popup.js","components/clients/Client.js","components/clients/Clients-header.js","components/clients/Loader.js","components/clients/Clients.js","components/actions/Update.js","components/actions/Add-client.js","components/actions/Actions.js","App.js","serviceWorker.js","index.js"],"names":["ClientPopup","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inputChange","e","setState","defineProperty","target","name","value","updateClient","state","surName","country","id","client","_id","togglePopup","split","console","log","react_default","a","createElement","className","type","onClick","onChange","Component","Client","mailtype","emailType","didSold","sold","showPopup","firstContact","slice","owner","clients_Client_popup","ClientsHeader","Loader","Clients","myClient","updatedClients","clients","map","newClient","objectSpread","axios","post","then","loader","_this2","get","response","data","_this3","placeholder","Clients_header","components_clients_Client","key","clients_Loader","Update","changeOwner","clientName","ownerName","list","AddClient","Actions","newOwner","components_actions_Update","actions_Add_client","App","BrowserRouter","Link","to","Route","exact","path","render","components_clients_Clients","components_actions_Actions","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+dA4CeA,qBAzCX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQVQ,YAAc,SAACC,GACXR,EAAKS,SAALR,OAAAS,EAAA,EAAAT,CAAA,GACKO,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,SAXfb,EAenBc,aAAe,WACX,IAAIF,EAAOZ,EAAKe,MAAMH,KAClBI,EAAUhB,EAAKe,MAAMC,QACrBC,EAAUjB,EAAKe,MAAME,QACrBC,EAAKlB,EAAKD,MAAMoB,OAAOC,IAC3BpB,EAAKD,MAAMe,aAAaI,EAAIN,EAAMI,EAASC,GAC3CjB,EAAKD,MAAMsB,eAnBXrB,EAAKe,MAAQ,CACTH,KAAMb,EAAMoB,OAAOP,KAAKU,MAAM,KAAK,GACnCN,QAASjB,EAAMoB,OAAOP,KAAKU,MAAM,KAAK,GACtCL,QAASlB,EAAMoB,OAAOF,SALXjB,wEA0Bf,OADAuB,QAAQC,IAAIrB,KAAKY,MAAMH,MAEnBa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeC,KAAK,SAASC,QAAS3B,KAAKJ,MAAMsB,aAAnE,KACAI,EAAAC,EAAAC,cAAA,wBACDF,EAAAC,EAAAC,cAAA,mBAAUF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOjB,KAAK,OAAOC,MAAOV,KAAKY,MAAMH,KAAMmB,SAAU5B,KAAKI,eAC/EkB,EAAAC,EAAAC,cAAA,qBAAYF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOjB,KAAK,UAAUC,MAAOV,KAAKY,MAAMC,QAASe,SAAU5B,KAAKI,eACxFkB,EAAAC,EAAAC,cAAA,qBAAYF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOjB,KAAK,UAAUC,MAAOV,KAAKY,MAAME,QAASc,SAAU5B,KAAKI,eACxFkB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeC,KAAK,SAASC,QAAS3B,KAAKW,cAA7D,mBAnCMkB,cC2CXC,qBAxCX,SAAAA,IAAc,IAAAjC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8B,IACVjC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgC,GAAA3B,KAAAH,QAMJ+B,SAAW,WACP,IAAMC,EAAYnC,EAAKD,MAAMoB,OAAOgB,UACpC,OAAQA,GAAwB,KATtBnC,EAYdoC,QAAU,WAEN,OADapC,EAAKD,MAAMoB,OAAOkB,KAChBZ,EAAAC,EAAAC,cAAA,mBAAiB,KAdtB3B,EAiBdqB,YAAc,WACVrB,EAAKS,SAAS,CAAC6B,WAAYtC,EAAKe,MAAMuB,YACtCf,QAAQC,IAAIxB,EAAKe,MAAMuB,YAjBvBtC,EAAKe,MAAQ,CACTuB,WAAW,GAHLtC,wEAwBV,IAAMmB,EAAShB,KAAKJ,MAAMoB,OAC1B,OACIM,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBACVH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeE,QAAS3B,KAAKkB,aAA/C,QAA0EF,EAAOP,KAAKU,MAAM,KAAK,IACrGG,EAAAC,EAAAC,cAAA,UAAKR,EAAOP,KAAKU,MAAM,KAAK,IAC5BG,EAAAC,EAAAC,cAAA,UAAKR,EAAOF,SACZQ,EAAAC,EAAAC,cAAA,UAAKR,EAAOoB,aAAaC,MAAM,EAAE,KACjCf,EAAAC,EAAAC,cAAA,UAAKxB,KAAK+B,YACVT,EAAAC,EAAAC,cAAA,UAAKxB,KAAKiC,WACVX,EAAAC,EAAAC,cAAA,UAAKR,EAAOsB,OACXtC,KAAKY,MAAMuB,UAAYb,EAAAC,EAAAC,cAACe,EAAD,CAAarB,YAAalB,KAAKkB,YAAaF,OAAQA,EAAQL,aAAcX,KAAKJ,MAAMe,eAAmB,aAnC3HkB,cCeNW,mLAdP,OACIlB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBACVH,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,6BAXYK,aCebY,mLAZP,OACAnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBATNI,aCyENa,iCAjEX,SAAAA,IAAc,IAAA7C,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0C,IACV7C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4C,GAAAvC,KAAAH,QAgBJW,aAAe,SAACI,EAAIN,EAAMI,EAASC,GAC/B,IAAI6B,EACAC,EAAiB/C,EAAKe,MAAMiC,QAAQC,IAAI,SAAA9B,GACxC,GAAIA,EAAOC,MAAQF,EAAI,CACnB,IAAIgC,EAASjD,OAAAkD,EAAA,EAAAlD,CAAA,GAAQkB,GAKrB,OAJA+B,EAAUtC,KAAOA,EAAO,IAAMI,EAC9BkC,EAAUjC,QAAUA,EACpB6B,EAAWI,EACX3B,QAAQC,IAAIsB,GACLI,EAEX,OAAO/B,IAEXiC,IAAMC,KAAK,WAAYP,GAAUQ,KAAK,WAClCtD,EAAKS,SAAS,CACVuC,QAASD,OA9BjB/C,EAAKe,MAAQ,CACTiC,QAAS,GACTO,QAAQ,GAJFvD,mFAQM,IAAAwD,EAAArD,KAChBiD,IAAMK,IAAI,YAAYH,KAAK,SAACI,GACxBF,EAAK/C,SAAS,CACVuC,QAASU,EAASC,KAClBJ,QAAQ,uCAyBX,IAAAK,EAAAzD,KACL,OACIsB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOgC,YAAY,WAC/BpC,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,UAAQd,MAAM,QAAd,QACAY,EAAAC,EAAAC,cAAA,UAAQd,MAAM,QAAd,QACAY,EAAAC,EAAAC,cAAA,UAAQd,MAAM,SAAd,SACAY,EAAAC,EAAAC,cAAA,UAAQd,MAAM,SAAd,SACAY,EAAAC,EAAAC,cAAA,UAAQd,MAAM,WAAd,YAEJY,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAACmC,EAAD,MACC3D,KAAKY,MAAMiC,QAAQC,IAAI,SAAA9B,GAAM,OAC1BM,EAAAC,EAAAC,cAACoC,EAAD,CACA5C,OAAQA,EACR6C,IAAK7C,EAAOC,IACZN,aAAc8C,EAAK9C,mBAIlBX,KAAKY,MAAMwC,OAAS9B,EAAAC,EAAAC,cAACsC,EAAD,MAAa,aA5DxCjC,cCkEPkC,qBAvEX,SAAAA,IAAc,IAAAlE,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+D,IACVlE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiE,GAAA5D,KAAAH,QAOJI,YAAc,SAACC,GACXR,EAAKS,SAALR,OAAAS,EAAA,EAAAT,CAAA,GACKO,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,SAVpBb,EAcdmE,YAAc,WACV,IAAIC,EAAapE,EAAKe,MAAMqD,WACxBC,EAAYrE,EAAKe,MAAMsD,UAC3BrE,EAAKD,MAAMoE,YAAYC,EAAYC,IAfnCrE,EAAKe,MAAQ,CACTqD,WAAW,GACXC,UAAU,IAJJrE,wEAqBV,IAAMgD,EAAU7C,KAAKJ,MAAMiD,QAE3B,OADAzB,QAAQC,IAAIrB,KAAKY,OAEbU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAhB,WACQH,EAAAC,EAAAC,cAAA,SAAO2C,KAAK,UAAUzD,MAAOV,KAAKY,MAAMqD,WAAYxD,KAAK,aAAaiD,YAAY,cAAc9B,SAAU5B,KAAKI,YAAaqB,UAAU,kBAC9IH,EAAAC,EAAAC,cAAA,YAAUT,GAAG,WACR8B,EAAQC,IAAI,SAAA9B,GACT,OAAOM,EAAAC,EAAAC,cAAA,UAAQqC,IAAK7C,EAAOD,GAAIL,MAAOM,EAAOP,YAMzDa,EAAAC,EAAAC,cAAA,mCAEAF,EAAAC,EAAAC,cAAA,UAAQf,KAAK,YAAYmB,SAAU5B,KAAKI,YAAaW,GAAG,mBAChDO,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,UAAQd,MAAM,gBAAd,gBACAY,EAAAC,EAAAC,cAAA,UAAQd,MAAM,mBAAd,mBACAY,EAAAC,EAAAC,cAAA,UAAQd,MAAM,cAAd,cACAY,EAAAC,EAAAC,cAAA,UAAQd,MAAM,eAAd,eACAY,EAAAC,EAAAC,cAAA,UAAQd,MAAM,iBAAd,iBACAY,EAAAC,EAAAC,cAAA,UAAQd,MAAM,kBAAd,kBACAY,EAAAC,EAAAC,cAAA,UAAQd,MAAM,kBAAd,mBAEJY,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SAASX,GAAG,kBAAkBL,MAAM,cAEpDY,EAAAC,EAAAC,cAAA,yBAEAF,EAAAC,EAAAC,cAAA,UAAQT,GAAG,mBACHO,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,UAAQd,MAAM,KAAd,KACAY,EAAAC,EAAAC,cAAA,UAAQd,MAAM,KAAd,KACAY,EAAAC,EAAAC,cAAA,UAAQd,MAAM,KAAd,KACAY,EAAAC,EAAAC,cAAA,UAAQd,MAAM,KAAd,MAEJY,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SAASX,GAAG,kBAAkBL,MAAM,UAEpDY,EAAAC,EAAAC,cAAA,2BAEAF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SAASX,GAAG,kBAAkBL,MAAM,qBAjE3CmB,cCgCNuC,qBA/BX,SAAAA,IAAc,IAAAvE,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoE,IACVvE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsE,GAAAjE,KAAAH,QASJI,YAAc,SAACC,GACXR,EAAKS,SAALR,OAAAS,EAAA,EAAAT,CAAA,GACKO,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,QAE9BU,QAAQC,IAAIhB,EAAEG,OAAOE,QAZrBb,EAAKe,MAAQ,CACTH,KAAM,GACNI,QAAS,GACTC,QAAS,GACTwB,MAAO,IANDzC,wEAkBV,OACIyB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,wBACIF,EAAAC,EAAAC,cAAA,0BAAiBF,EAAAC,EAAAC,cAAA,SAAOT,GAAG,iBAAiBN,KAAK,OAAOmB,SAAU5B,KAAKI,YAAasB,KAAK,UACzFJ,EAAAC,EAAAC,cAAA,uBAAcF,EAAAC,EAAAC,cAAA,SAAOT,GAAG,iBAAiBN,KAAK,UAAUmB,SAAU5B,KAAKI,YAAasB,KAAK,UACzFJ,EAAAC,EAAAC,cAAA,uBAAcF,EAAAC,EAAAC,cAAA,SAAOT,GAAG,iBAAiBN,KAAK,UAAUmB,SAAU5B,KAAKI,YAAasB,KAAK,UACzFJ,EAAAC,EAAAC,cAAA,qBAAYF,EAAAC,EAAAC,cAAA,SAAOT,GAAG,iBAAiBN,KAAK,QAAQmB,SAAU5B,KAAKI,YAAasB,KAAK,UACrFJ,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,SAAOT,GAAG,oBAAoBW,KAAK,SAAShB,MAAM,mBAAvD,aA1BImB,cCuCTwC,qBAnCX,SAAAA,IAAc,IAAAxE,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqE,IACVxE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuE,GAAAlE,KAAAH,QAcJgE,YAAa,SAACC,EAAYK,GACtBrB,IAAMC,KAAK,iCAAmCe,EAAY,CAACK,aAAWnB,KAAK,SAACb,GACxEzC,EAAKS,SAAS,OAflBT,EAAKe,MAAQ,CACTiC,QAAS,IAHHhD,mFAOM,IAAAwD,EAAArD,KAChBiD,IAAMK,IAAI,iCAAiCH,KAAK,SAACI,GAC7CF,EAAK/C,SAAS,CAACuC,QAASU,EAASC,MAAQ,iDAgB7C,OADApC,QAAQC,IAAIrB,KAAKY,MAAMiC,SAEnBvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAC+C,EAAD,CAAQ1B,QAAS7C,KAAKY,MAAMiC,QAASmB,YAAahE,KAAKgE,cACvD1C,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACgD,EAAD,cA9BM3C,cCoBP4C,0LAjBX,OACEnD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,KACEpD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAMC,GAAG,YAAT,YACJtD,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAMC,GAAG,YAAT,YACJtD,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAMC,GAAG,cAAT,eAENtD,EAAAC,EAAAC,cAACqD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,WAAWC,OAAQ,kBAAM1D,EAAAC,EAAAC,cAACyD,EAAD,SAC3C3D,EAAAC,EAAAC,cAACqD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,WAAWC,OAAQ,kBAAK1D,EAAAC,EAAAC,cAAC0D,EAAD,SAC1C5D,EAAAC,EAAAC,cAACqD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,wBAbVlD,cCMEsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASR,OAAO1D,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,KAAK,SAAA4C,GACjCA,EAAaC","file":"static/js/main.a4855514.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport '../../styles/clients/Client-popup.css'\r\nclass ClientPopup extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            name: props.client.name.split(\" \")[0],\r\n            surName: props.client.name.split(\" \")[1],\r\n            country: props.client.country\r\n        }\r\n    }\r\n\r\n    inputChange = (e)=> {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    updateClient = ()=> {\r\n        let name = this.state.name\r\n        let surName = this.state.surName\r\n        let country = this.state.country\r\n        let id = this.props.client._id\r\n        this.props.updateClient(id, name, surName, country)\r\n        this.props.togglePopup()\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state.name)\r\n        return (\r\n            <div className=\"popup\">\r\n                <div className=\"popup-inner\">\r\n                    <button className=\"close-button\" type=\"button\" onClick={this.props.togglePopup}>X</button>\r\n                    <h3>edit info </h3>\r\n                   <p> Name: <input type=\"text\" name=\"name\" value={this.state.name} onChange={this.inputChange}/></p>\r\n                    <p>Surname: <input type=\"text\" name=\"surName\" value={this.state.surName} onChange={this.inputChange} /></p>\r\n                    <p>Country: <input type=\"text\" name=\"country\" value={this.state.country} onChange={this.inputChange} /></p>\r\n                    <button className=\"popup-update\" type=\"button\" onClick={this.updateClient}>Update</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default ClientPopup;","import React, { Component } from \"react\";\r\nimport ClientPopup from './Client-popup';\r\nimport '../../styles/clients/Client.css';\r\n\r\nclass Client extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            showPopup: false\r\n        }\r\n    }\r\n\r\n    mailtype = ()=> {\r\n        const emailType = this.props.client.emailType\r\n        return (emailType ? emailType : \"-\")\r\n    }\r\n\r\n    didSold = ()=>{\r\n        const sold = this.props.client.sold\r\n        return (sold ? <p>&#9745;</p> : \"-\")\r\n    }\r\n\r\n    togglePopup = ()=> {\r\n        this.setState({showPopup: !this.state.showPopup})\r\n        console.log(this.state.showPopup)\r\n\r\n      }\r\n\r\n    render() {\r\n        const client = this.props.client\r\n        return (\r\n            <tr className=\"clients-container\">\r\n                <td><button className=\"popup-button\" onClick={this.togglePopup}>Edit</button>{client.name.split(\" \")[0]}</td>\r\n                <td>{client.name.split(\" \")[1]}</td>\r\n                <td>{client.country}</td>\r\n                <td>{client.firstContact.slice(0,10)}</td>\r\n                <td>{this.mailtype()}</td>\r\n                <td>{this.didSold()}</td>\r\n                <td>{client.owner}</td>\r\n                {this.state.showPopup ? <ClientPopup togglePopup={this.togglePopup} client={client} updateClient={this.props.updateClient} /> : null}\r\n            </tr>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Client;","import React, { Component } from \"react\";\r\n\r\nclass ClientsHeader extends Component {\r\n\r\n    render(){\r\n        return (\r\n            <tr className=\"clients-header\">\r\n                <th> Name </th>\r\n                <th> Surname </th>\r\n                <th> Country </th>\r\n                <th> First Contact </th>\r\n                <th> Email type </th>\r\n                <th> Sold </th>\r\n                <th> Owner </th>\r\n            </tr>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ClientsHeader;","import React, { Component } from \"react\";\r\n\r\nclass Loader extends Component {\r\n    \r\n    render() {\r\n        return (\r\n        <div className=\"spinner\">\r\n            <div className=\"rect1\"></div>\r\n            <div className=\"rect2\"></div>\r\n            <div className=\"rect3\"></div>\r\n            <div className=\"rect4\"></div>\r\n            <div className=\"rect5\"></div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Loader;","import React, { Component } from \"react\";\r\nimport axios from 'axios';\r\nimport Client from './Client';\r\nimport ClientsHeader from './Clients-header';\r\nimport Loader from '../clients/Loader';\r\nimport '../../styles/clients/Clients.css';\r\nimport '../../styles/clients/ClientsHeader.css';\r\nimport '../../styles/clients/Loader.css';\r\n\r\nclass Clients extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            clients: [],\r\n            loader: true\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get('/clients').then((response) => {\r\n            this.setState({\r\n                clients: response.data,\r\n                loader: false\r\n            })\r\n        })\r\n    }\r\n\r\n    updateClient = (id, name, surName, country) => {\r\n        let myClient;\r\n        let updatedClients = this.state.clients.map(client => {\r\n            if (client._id === id) {\r\n                let newClient = { ...client };\r\n                newClient.name = name + \" \" + surName;\r\n                newClient.country = country;\r\n                myClient = newClient\r\n                console.log(myClient)\r\n                return newClient;\r\n            }\r\n            return client;\r\n        })\r\n        axios.post('/clients', myClient).then(()=> {\r\n            this.setState({\r\n                clients: updatedClients\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input type=\"text\" placeholder=\"Search\" />\r\n                <select>\r\n                    <option value=\"sold\">Sold</option>\r\n                    <option value=\"name\">Name</option>\r\n                    <option value=\"email\">Email</option>\r\n                    <option value=\"owner\">Owner</option>\r\n                    <option value=\"country\">Country</option>\r\n                </select>\r\n                <table>\r\n                    <tbody>\r\n                        <ClientsHeader />\r\n                        {this.state.clients.map(client =>\r\n                            <Client\r\n                            client={client}\r\n                            key={client._id}\r\n                            updateClient={this.updateClient}\r\n                            />)}\r\n                    </tbody>\r\n                </table>\r\n                            {this.state.loader ? <Loader /> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Clients;","import React, { Component } from \"react\";\r\nimport '../../styles/actions/Update.css';\r\n\r\nclass Update extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            clientName:\"\",\r\n            ownerName:\"\"\r\n        }\r\n    }\r\n\r\n    inputChange = (e)=> {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    changeOwner = ()=> {\r\n        let clientName = this.state.clientName\r\n        let ownerName = this.state.ownerName\r\n        this.props.changeOwner(clientName, ownerName)\r\n    }\r\n\r\n    render() {\r\n        const clients = this.props.clients\r\n        console.log(this.state)\r\n        return (\r\n            <div className=\"update\">\r\n                <h4>UPDATE</h4>\r\n                <div>\r\n                    <span className=\"client-span\">\r\n                    Client: <input list=\"clients\" value={this.state.clientName} name=\"clientName\" placeholder=\"Client Name\" onChange={this.inputChange} className=\"actions-input\" />\r\n                    <datalist id=\"clients\"> \r\n                        {clients.map(client => {\r\n                            return <option key={client.id} value={client.name} />                        \r\n                            }\r\n                        )}\r\n                    </datalist>\r\n                    </span>\r\n                </div>\r\n                <div>\r\n                    Transfer ownership to\r\n                <select name=\"ownerName\" onChange={this.inputChange} id=\"actions-select1\">\r\n                        <option>Owner</option>\r\n                        <option value=\"Emily Durham\">Emily Durham</option>\r\n                        <option value=\"Janice Alvarado\">Janice Alvarado</option>\r\n                        <option value=\"Leila Howe\">Leila Howe</option>\r\n                        <option value=\"Hull Conrad\">Hull Conrad</option>\r\n                        <option value=\"Martin Massey\">Martin Massey</option>\r\n                        <option value=\"Shepherd Stone\">Shepherd Stone</option>\r\n                        <option value=\"Barton Ramirez\">Barton Ramirez</option>\r\n                    </select>\r\n                    <input type=\"button\" id=\"actions-button1\" value=\"TRANSFER\" />\r\n                </div>\r\n                <div>\r\n                    Send email:\r\n                <select id=\"actions-select2\">\r\n                        <option>Email Type</option>\r\n                        <option value=\"A\">A</option>\r\n                        <option value=\"B\">B</option>\r\n                        <option value=\"C\">C</option>\r\n                        <option value=\"D\">D</option>\r\n                    </select>\r\n                    <input type=\"button\" id=\"actions-button2\" value=\"SEND\" />\r\n                </div>\r\n                <div>\r\n                    Declare sale!\r\n                <input type=\"button\" id=\"actions-button3\" value=\"DECLARE\" />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Update;","import React, { Component } from \"react\";\r\nimport '../../styles/actions/Add-client.css';\r\n\r\nclass AddClient extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            name: \"\",\r\n            surName: \"\",\r\n            country: \"\",\r\n            owner: \"\"\r\n        }\r\n    }\r\n\r\n    inputChange = (e)=> {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n        console.log(e.target.value)\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"add-client\">\r\n                <h4>ADD CLIENT</h4>\r\n                    <div>First name: <input id=\"actions-input1\" name=\"name\" onChange={this.inputChange} type=\"text\" /></div>\r\n                    <div>Surname: <input id=\"actions-input2\" name=\"surName\" onChange={this.inputChange} type=\"text\" /></div>\r\n                    <div>Country: <input id=\"actions-input3\" name=\"country\" onChange={this.inputChange} type=\"text\" /></div>\r\n                    <div>Owner: <input id=\"actions-input4\" name=\"owner\" onChange={this.inputChange} type=\"text\" /></div>\r\n                    <div><input id=\"add-client-button\" type=\"button\" value=\"Add New Client\" /> </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddClient;","import React, { Component } from \"react\";\r\nimport Update from './Update';\r\nimport AddClient from './Add-client';\r\nimport axios from 'axios'\r\nimport '../../styles/actions/Actions.css';\r\n\r\nclass Actions extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            clients: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get('http://localhost:3030/actions').then((response)=> {\r\n            this.setState({clients: response.data }, ()=> {\r\n                // console.log(this.state.clients)\r\n            })\r\n        })\r\n    }\r\n\r\n    changeOwner= (clientName, newOwner)=>{\r\n        axios.post('http://localhost:3030/actions/' + clientName, {newOwner}).then((owner)=> {\r\n            this.setState({\r\n\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state.clients)\r\n        return (\r\n            <div className=\"actions\">\r\n                <Update clients={this.state.clients} changeOwner={this.changeOwner} />\r\n                <hr/>\r\n                <AddClient />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Actions;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport Clients from './components/clients/Clients';\nimport Actions from './components/actions/Actions'\nimport './App.css';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <ul>\n            <li><Link to=\"/clients\">Clients</Link></li>\n            <li><Link to=\"/actions\">Actions</Link></li>\n            <li><Link to=\"/analytics\">Analytics</Link></li>\n          </ul>\n          <Route exact path=\"/clients\" render={() => <Clients />} />\n          <Route exact path=\"/actions\" render={()=> <Actions />} />\n          <Route exact path=\"/analytics\" />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}